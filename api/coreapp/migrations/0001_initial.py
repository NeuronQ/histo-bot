# Generated by Django 2.1.7 on 2019-05-28 20:56

import coreapp.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import functools


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(blank=True, db_index=True, max_length=255, verbose_name='full name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', coreapp.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'analyses',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('purpose', models.CharField(choices=[('train', 'Training'), ('validation', 'Validation'), ('test', 'Testing')], max_length=255)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datasetimages', to='coreapp.Dataset')),
            ],
            options={
                'ordering': ['created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('w', models.IntegerField(blank=True, null=True)),
                ('h', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('image', models.ImageField(blank=True, height_field='h', null=True, upload_to=functools.partial(coreapp.models.make_image_filepath, *(), **{'prefix': 'images'}), width_field='w')),
                ('datasets', models.ManyToManyField(through='coreapp.DatasetImage', to='coreapp.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabelImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('w', models.IntegerField(blank=True, null=True)),
                ('h', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('image', models.ImageField(blank=True, height_field='h', null=True, upload_to=functools.partial(coreapp.models.make_image_filepath, *(), **{'prefix': 'labels'}), width_field='w')),
                ('datasets', models.ManyToManyField(through='coreapp.DatasetImage', to='coreapp.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('labels_json_str', models.TextField(blank=True, default='{}', verbose_name='Labels')),
                ('hparams_json_str', models.TextField(blank=True, default='{}', verbose_name="Learner Constructor Params (overrides for architecture's")),
            ],
            options={
                'verbose_name_plural': 'ML-Models',
            },
        ),
        migrations.AddField(
            model_name='labelimage',
            name='models',
            field=models.ManyToManyField(to='coreapp.MLModel'),
        ),
        migrations.AddField(
            model_name='datasetimage',
            name='image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coreapp.Image'),
        ),
        migrations.AddField(
            model_name='datasetimage',
            name='label_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='coreapp.LabelImage'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='images',
            field=models.ManyToManyField(through='coreapp.DatasetImage', to='coreapp.Image'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='datasets',
            field=models.ManyToManyField(to='coreapp.Dataset'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='coreapp.MLModel'),
        ),
    ]
